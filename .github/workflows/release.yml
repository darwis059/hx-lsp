name: Release

on:
  push:
    branches:
      - patch/ci-release-*

jobs:
  build:
    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [x86_64-linux, aarch64-linux, x86_64-macos, aarch64-macos, x86_64-windows]
        include:
          - build: x86_64-linux
            os: ubuntu-24.04
            rust: stable
            target: x86_64-unknown-linux-gnu
            cross: false
            bin_name: hx-lsp
            archive_name: hx-lsp-x86_64-linux.tar.gz
          - build: aarch64-linux
            os: ubuntu-24.04-arm
            rust: stable
            target: aarch64-unknown-linux-gnu
            cross: false
            bin_name: hx-lsp
            archive_name: hx-lsp-aarch64-linux.tar.gz
          - build: x86_64-macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            cross: false
            bin_name: hx-lsp
            archive_name: hx-lsp-x86_64-macos.tar.gz
          - build: aarch64-macos
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
            cross: false
            skip_tests: true
            bin_name: hx-lsp
            archive_name: hx-lsp-aarch64-macos.tar.gz
          - build: x86_64-windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            cross: false
            bin_name: hx-lsp.exe
            archive_name: hx-lsp-x86_64-windows.zip

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install ${{ matrix.rust }} toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Cargo build
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Prepare release files
        shell: bash
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/${{ matrix.bin_name }} release/
          cp README* release/ 2>/dev/null || true
          cp LICENSE* release/ 2>/dev/null || true

      # ✅ Windows: use PowerShell Compress-Archive
      - name: Package binary on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $archive = "${{ matrix.archive_name }}"
          $binary = "release\${{ matrix.bin_name }}"
          $files = @($binary)
          if (Test-Path -Path "release\README.md")   { $files += "release\README.md" }
          if (Test-Path -Path "release\LICENSE-MIT")     { $files += "release\LICENSE-MIT" }
          Compress-Archive -Path $files -DestinationPath "release\$archive"

      # ✅ Unix/macOS: use bash + zip/tar
      - name: Package binary on Unix
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd release
          if [[ "${{ matrix.archive_name }}" == *.zip ]]; then
            zip "${{ matrix.archive_name }}" "${{ matrix.bin_name }}" README* LICENSE* 2>/dev/null || zip "${{ matrix.archive_name }}" "${{ matrix.bin_name }}"
          else
            tar -czf "${{ matrix.archive_name }}" "${{ matrix.bin_name }}" README* LICENSE* 2>/dev/null || tar -czf "${{ matrix.archive_name }}" "${{ matrix.bin_name }}"
          fi



      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: release/${{ matrix.archive_name }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: binaries

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: binaries/**/*.tar.gz
          # zip 文件也一并包含
          additional_files: binaries/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
